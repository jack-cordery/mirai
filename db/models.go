// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type RoleRequestStatus string

const (
	RoleRequestStatusPENDING  RoleRequestStatus = "PENDING"
	RoleRequestStatusAPPROVED RoleRequestStatus = "APPROVED"
	RoleRequestStatusREJECTED RoleRequestStatus = "REJECTED"
)

func (e *RoleRequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleRequestStatus(s)
	case string:
		*e = RoleRequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleRequestStatus: %T", src)
	}
	return nil
}

type NullRoleRequestStatus struct {
	RoleRequestStatus RoleRequestStatus `json:"role_request_status"`
	Valid             bool              `json:"valid"` // Valid is true if RoleRequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RoleRequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleRequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleRequestStatus), nil
}

type Availability struct {
	ID         int32            `json:"id"`
	EmployeeID int32            `json:"employee_id"`
	Datetime   pgtype.Timestamp `json:"datetime"`
	TypeID     int32            `json:"type_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	LastEdited pgtype.Timestamp `json:"last_edited"`
}

type Booking struct {
	ID         int32            `json:"id"`
	UserID     int32            `json:"user_id"`
	TypeID     int32            `json:"type_id"`
	Paid       bool             `json:"paid"`
	Cost       int32            `json:"cost"`
	Notes      pgtype.Text      `json:"notes"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	LastEdited pgtype.Timestamp `json:"last_edited"`
}

type BookingSlot struct {
	BookingID          int32 `json:"booking_id"`
	AvailabilitySlotID int32 `json:"availability_slot_id"`
}

type BookingType struct {
	ID          int32            `json:"id"`
	Title       string           `json:"title"`
	Description string           `json:"description"`
	Fixed       bool             `json:"fixed"`
	Cost        int32            `json:"cost"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	LastEdited  pgtype.Timestamp `json:"last_edited"`
}

type Employee struct {
	ID          int32            `json:"id"`
	Name        string           `json:"name"`
	Surname     string           `json:"surname"`
	Email       string           `json:"email"`
	Title       string           `json:"title"`
	Description string           `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	LastLogin   pgtype.Timestamp `json:"last_login"`
}

type Role struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

type RoleRequest struct {
	ID              int32             `json:"id"`
	UserID          int32             `json:"user_id"`
	RequestedRoleID int32             `json:"requested_role_id"`
	Status          RoleRequestStatus `json:"status"`
	Comment         pgtype.Text       `json:"comment"`
	ApprovedBy      pgtype.Int4       `json:"approved_by"`
	CreatedAt       pgtype.Timestamp  `json:"created_at"`
	ApprovedAt      pgtype.Timestamp  `json:"approved_at"`
}

type Session struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	SessionToken string           `json:"session_token"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

type User struct {
	ID             int32            `json:"id"`
	Name           string           `json:"name"`
	Surname        string           `json:"surname"`
	Email          string           `json:"email"`
	HashedPassword string           `json:"hashed_password"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	LastLogin      pgtype.Timestamp `json:"last_login"`
}

type UserRole struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}
